import type { NextApiRequest, NextApiResponse } from 'next';
import { runAgent } from '../../lib/langchainAgent';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    console.warn('üö´ –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', req.method);
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { query } = req.body;

  if (!query) {
    console.warn('‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ù–µ—Ç –ø–æ–ª—è "query"');
    return res.status(400).json({ error: 'No query provided' });
  }

  console.log('üöÄ –ü—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å –≤ –∞–≥–µ–Ω—Ç:', query);

  try {
    const result = await runAgent(query);

    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞:', result);

    // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –∏ —Ç–∏–ø
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    res.status(200).json({ answer: result });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ LangChain –≤ –∞–≥–µ–Ω—Ç–µ:', error);

    res.status(500).json({
      answer: '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
    });
  }
}
