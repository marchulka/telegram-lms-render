import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' })
  }

  const body = req.body
  const message = body?.message?.text
  const chatId = body?.message?.chat?.id

  console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', body)

  if (!message || !chatId) {
    console.log('‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ chatId')
    return res.status(400).json({ error: 'Missing message or chatId' })
  }

  try {
    // üîó –õ–æ–≥–∏—Ä—É–µ–º Supabase
    console.log("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Supabase:", message)
    // (–¢—ã –º–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–∏—Ç—å —Å—é–¥–∞ actual Supabase client, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

    // üîó –ó–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É
    console.log("üì° –ó–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É:", message)

    const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL}/api/agent`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ query: message }),
    })

    const data = await response.json()
    console.log("ü§ñ –û—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞:", data)

    const reply = data?.result ?? '‚ö†Ô∏è –ê–≥–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.'

    // üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    console.log("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram:", chatId, reply)

    await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: reply,
      }),
    })

    return res.status(200).json({ ok: true })
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ webhook:", err)

    await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∞–≥–µ–Ω—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      }),
    })

    return res.status(500).json({ error: 'Agent call failed' })
  }
}
