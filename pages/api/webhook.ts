import type { NextApiRequest, NextApiResponse } from 'next'
import { Telegraf } from 'telegraf'

const bot = new Telegraf(process.env.TELEGRAM_TOKEN!)

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const body = req.body
    const message = body?.message?.text
    const chatId = body?.message?.chat?.id

    console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', body)

    if (!message || !chatId) {
      return res.status(400).json({ error: 'No message or chatId' })
    }

    // üîó –í—ã–∑–æ–≤ LangChain –∞–≥–µ–Ω—Ç–∞
    const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL}/api/agent`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ query: message }),
    })

    const data = await response.json()

    // üîÅ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: data.result ?? '‚ö†Ô∏è –û—à–∏–±–∫–∞: –∞–≥–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª',
      }),
    })

    return res.status(200).json({ ok: true })
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ webhook:', err)
    return res.status(500).json({ error: 'Internal error' })
  }
}
