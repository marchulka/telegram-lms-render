import { ChatOpenAI } from '@langchain/openai';
import { initializeAgentExecutorWithOptions } from 'langchain/agents';
import { logChatToSupabase } from './logChatToSupabase';
import { Tool } from 'langchain/tools';

// üõ†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç ‚Äî EchoTool
class EchoTool extends Tool {
  name = 'echo';
  description = '–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é';

  async _call(input: string): Promise<string> {
    return `üîÅ –¢—ã —Å–∫–∞–∑–∞–ª: ${input}`;
  }

  async call(input: string): Promise<string> {
    return this._call(input);
  }
}

export async function runAgent(query: string): Promise<string> {
  try {
    console.log("üöÄ –ü—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å –≤ –∞–≥–µ–Ω—Ç:", query);

    const model = new ChatOpenAI({
      modelName: 'gpt-4o',
      temperature: 0.7,
      openAIApiKey: process.env.OPENAI_API_KEY!,
    });

    // ‚õëÔ∏è –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω tool, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞–ª–æ
    const tools = [new EchoTool()];

    const executor = await initializeAgentExecutorWithOptions(tools, model, {
      agentType: 'openai-functions',
      verbose: true,
    });

    const result = await executor.run(query);
    console.log("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞:", result);

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Supabase
    await logChatToSupabase(query, result);

    return result;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ LangChain –∞–≥–µ–Ω—Ç–µ:', error);
    return '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}
